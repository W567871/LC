package partitionToKEqualSumLC698;
import java.util.*;

// Solution7 is based on Solution6 by trying to improvie memoizing performance.
// Cache has been changed from Map<String, Boolean> to Map<Integer, Boolean>, because it's relatively easiery and faster to calculate an Integer hash code key.  The key is generated by (Integer hash = Arrays.hashCode(usedNums);), which should be much ÃŸmore efficient than String concat.

// indeed, the runtime has been improved to about 28 - 31 ms

//https://leetcode.com/problems/partition-to-k-equal-sum-subsets/submissions/851335477/
// Runtime 28 ms Beats 76.50% Memory 46 MB Beats 32.12%

// https://leetcode.com/problems/partition-to-k-equal-sum-subsets/submissions/851335324/
// Runtime 31 ms Beats 76.32% Memory 45.7 MB Beats 32.30%

// Comparing to 55ms - 112 ms in Solution6, the speed has indeeded improved by 2 times, but still slower than one-optimization version Solution5.java
// This means the cost of hashing is very big and not worthy it (performance gain is far less than cost increase by caching implemenation)


public class Solution7 {
    public static void main(String[] args) {
        Solution7 solution = new Solution7();
        // boolean res = solution.canPartitionKSubsets(new int[] {4,3,2,3,5,2,1}, 4);
        // boolean res = solution.canPartitionKSubsets(new int[] {2,2,2,2,3,4,5}, 4);
        // boolean res = solution.canPartitionKSubsets(new int[] {1,1,1,1,2,2,2,2}, 4);
        boolean res = solution.canPartitionKSubsets(new int[] { 10, 5, 5, 4, 3, 6, 6, 7, 6, 8, 6, 3, 4, 5, 3, 7 }, 8);
        System.out.println("cacheValUsed = " + solution.cachedValUsed);
        System.out.println(res);
    }

    int[] nums;
    int SUM;
    boolean[] usedNums;
    Map<Integer, Boolean> cache = new HashMap<>();    
    int cachedValUsed;

    public boolean canPartitionKSubsets(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return false;
        }

        SUM = Arrays.stream(nums).sum();

        if (SUM % k != 0) {
            return false;
        }
        SUM /= k;

        Arrays.sort(nums);
        reverse(nums);
        if ((nums[0]) > SUM) {
            return false;
        }

        this.nums = nums;

        usedNums = new boolean[nums.length];

        return partition(k, 0, 0);
    }

    private boolean partition(int buckets, int numPos, int bucketSum) {
        if (buckets == 0) {
            return true;
        }

        Boolean cacheRes = getMemoizeResults();
        if (cacheRes != null) {
            ++cachedValUsed;
            // System.out.println(", cachedValUsed = " + cachedValUsed + ", cache size = " + cache.keySet().size() + cache.toString());
            return cacheRes;
        }

        if (bucketSum == SUM) {
            boolean res = partition(buckets - 1, 0, 0);
            return res;
        }

        if (numPos >= nums.length) {
            return false;
        }

        if (bucketSum > SUM) {
            return false;
        }

        for (int i = numPos; i < nums.length; ++i) {
            if (usedNums[i]) {
                continue;
            }

            if (i > 0 && nums[i] == nums[i - 1] && !usedNums[i - 1]) {
                continue;
            }

            usedNums[i] = true;
            if (partition(buckets, i + 1, bucketSum + nums[i])) {
                return true;
            }  
            
            memoizeResults(false);
            usedNums[i] = false;
        }

        memoizeResults(false);
        return false;
    }

    private void reverse(int[] nums) {
        for (int i = 0; i < nums.length / 2; ++i) {
            int tmp = nums[i];
            nums[i] = nums[nums.length - 1 - i];
            nums[nums.length - 1 - i] = tmp;
        }
    }
    
    private Boolean getMemoizeResults() {
        Integer hash = Arrays.hashCode(usedNums);
        return cache.get(hash);
    }

    private void memoizeResults(boolean res) {
        Integer hash = Arrays.hashCode(usedNums);
        if (!cache.containsKey(hash)) {
            cache.put(hash, res);
        }
    }
    
}
